service: nhl-data-pipeline
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  vpc:
    securityGroupIds:
      - sg-0eb41fb6bf60a7bcc # Replace with your actual security group ID
    subnetIds:
      - subnet-0820b6cff5d2a2a67 # Replace with your actual subnet ID
      - subnet-006b11302045e1a7e
      - subnet-00d91b1674b12e42c
      - subnet-0113ec573bf47b763
      - subnet-0c3d532a3c689114e
      - subnet-0f8a67cd8c0efa235
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
            - rds:*
            - apigateway:*
          Resource:
            - Fn::GetAtt: [ScheduleToGameLogicQueue, Arn]
            - Fn::GetAtt: [GameLogicToDatabaseSaveQueue, Arn]
            - "arn:aws:apigateway:*::/restapis/x90b92tqe0/*" # Replace with the API ID
            - "arn:aws:execute-api:us-east-1:789721153475:x90b92tqe0/*" # Replace with your API Gateway ARN


resources:
  Resources:
    ScheduleToGameLogicQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: schedule-to-game-logic-queue
    GameLogicToDatabaseSaveQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: game-logic-to-database-save-queue

    NHL:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: mysql
        EngineVersion: 5.7
        DBInstanceIdentifier: nhl
        AllocatedStorage: 20
        MasterUsername: admin
        MasterUserPassword: password
        DBInstanceClass: db.t2.micro
        PubliclyAccessible: true
        MultiAZ: false
        StorageType: gp2

functions:
  handleScheduleFeed:
    handler: src/functions/scheduleFeedHandler/handler.handleScheduleFeed
    environment:
      QUEUE_URL: !GetAtt [ScheduleToGameLogicQueue, QueueUrl]
    events:
      - eventBridge:
          schedule: rate(1 minute)
    destinations:
      onSuccess:
        type: sqs
        arn: !GetAtt [ScheduleToGameLogicQueue, Arn]
  gameLogic:
    handler: src/functions/gameLogicHandler/handler.gameLogic
    environment:
      QUEUE_URL: !GetAtt [GameLogicToDatabaseSaveQueue, QueueUrl]
    events:
      - sqs:
          arn: !GetAtt [ScheduleToGameLogicQueue, Arn]
          batchSize: 1
    destinations:
      onSuccess:
        type: sqs
        arn: !GetAtt [GameLogicToDatabaseSaveQueue, Arn]
  databaseGame:
    handler: src/functions/databaseGameHandler/handler.databaseGame
    environment:
      QUEUE_URL: !GetAtt [GameLogicToDatabaseSaveQueue, QueueUrl]
      HOST: nhl.cqvu4vue0d4v.us-east-1.rds.amazonaws.com
      DATABASE: NHL
      USER: admin
      PASSWORD: password
    events:
      - sqs:
          arn: !GetAtt [GameLogicToDatabaseSaveQueue, Arn]
          batchSize: 1
  nhlAPI:
    handler: src/nhlAPI/api.handler
    environment:
      HOST: nhl.cqvu4vue0d4v.us-east-1.rds.amazonaws.com
      DATABASE: NHL
      USER: admin
      PASSWORD: password
    events:
      - http:
          path: games
          method: get
          cors: true
      - http:
          path: games/{id}
          method: get
          cors: true
      - http:
          path: players
          method: get
          cors: true
      - http:
          path: players/{id}
          method: get
          cors: true
      - http:
          path: teams
          method: get
          cors: true
      - http:
          path: teams/{id}
          method: get
          cors: true

custom:
  RDS_URL: !GetAtt [NHL, Endpoint.Address]