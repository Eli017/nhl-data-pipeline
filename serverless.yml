service: nhl-data-pipeline
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:*
            - rds:*
          Resource:
            - Fn::GetAtt: [ScheduleToGameLogicQueue, Arn]
            - Fn::GetAtt: [GameLogicToDatabaseSaveQueue, Arn]

resources:
  Resources:
    ScheduleToGameLogicQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: schedule-to-game-logic-queue
    GameLogicToDatabaseSaveQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: game-logic-to-database-save-queue

    NHL:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: mysql
        EngineVersion: 5.7
        DBInstanceIdentifier: nhl
        AllocatedStorage: 20
        MasterUsername: admin
        MasterUserPassword: password
        DBInstanceClass: db.t2.micro
        PubliclyAccessible: true
        MultiAZ: false
        StorageType: gp2

functions:
  handleScheduleFeed:
    handler: src/functions/scheduleFeedHandler/handler.handleScheduleFeed
    environment:
      QUEUE_URL: !GetAtt [ScheduleToGameLogicQueue, QueueUrl]
    events:
      - eventBridge:
          schedule: rate(1 minute)
    destinations:
      onSuccess:
        type: sqs
        arn: !GetAtt [ScheduleToGameLogicQueue, Arn]
  gameLogic:
    handler: src/functions/gameLogicHandler/handler.gameLogic
    environment:
      QUEUE_URL: !GetAtt [GameLogicToDatabaseSaveQueue, QueueUrl]
    events:
      - sqs:
          arn: !GetAtt [ScheduleToGameLogicQueue, Arn]
          batchSize: 1
    destinations:
      onSuccess:
        type: sqs
        arn: !GetAtt [GameLogicToDatabaseSaveQueue, Arn]
  databaseGame:
    handler: src/functions/databaseGameHandler/handler.databaseGame
    environment:
      QUEUE_URL: !GetAtt [GameLogicToDatabaseSaveQueue, QueueUrl]
    events:
      - sqs:
          arn: !GetAtt [GameLogicToDatabaseSaveQueue, Arn]
          batchSize: 1
  nhlAPI:
    handler: src/nhlAPI/game.handler
    events:
      - http:
          path: game
          method: get
          cors: true
      - http:
          path: game/{id}
          method: get
          cors: true

custom:
  RDS_URL: !GetAtt [NHL, Endpoint.Address]
  webpack:
    webpackConfig: 'webpack.config.ts' # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: 'yarn' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.ts # Provide a glob for files to ignore